- name: run omniai
  hosts: all
  any_errors_fatal: true
  max_fail_percentage: 0
  gather_facts: yes

  environment:

    # Configuration for containers
    DOCKER_NAME_C: "wcd_omni_infer_proxy"
    SCRIPTS_PATH: "/tmp/scripts_path"

  vars:
    docker_exec_cmd: |
      docker exec \

    run_proxy_cmd: |
      #!/bin/bash
      ps aux | grep "nginx" | grep -v "grep" | awk '{print $2}' | xargs kill -9

      prefill_result="{{ PREFILL_API_SERVER_LIST }}"
      prefill_result=`echo "$prefill_result" | awk '$1=$1'`

      decode_result=""
      decode_api_servers="{{ DECODE_API_SERVER_LIST }}"
      decode_api_servers=`echo "$decode_api_servers" | awk '$1=$1'`
      decode_array=(${decode_api_servers//,/ })
      for var in ${decode_array[@]}; do
        address=${var%@*}
        ip=${address%:*}
        port=${address#*:}
        num=${var#*@}
        for ((i=0; i<=$num;i++)); do
          if [[ -z ${decode_result} ]]; then
            decode_result="$ip:$port"
          else
            decode_result="${decode_result},$ip:$port"
          fi
          ((port++))
        done
      done

      cd /workspace/omniinfer/tools/scripts
      bash global_proxy.sh \
        --listen-port "$PROXY_NODE_PORT" \
        --prefill-servers-list "$prefill_result" \
        --decode-servers-list "$decode_result" \
        --log-file ${LOG_PATH}/{{ inventory_hostname }}/nginx_error.log \
        --log-level notice \
        --core-num 4 \
        --start-core-index 16 \
        --prefill-lb-sdk ${PREFILL_LB_SDK} \
        --decode-lb-sdk ${DECODE_LB_SDK}

    docker_start_proxy_cmd_c: >
      {{ docker_exec_cmd }}
      -d $DOCKER_NAME_C
      /bin/bash -c $SCRIPTS_PATH/run_proxy_server.sh

  tasks:
    - name: generate container name.
      set_fact:
        ACTUAL_DOCKER_NAME_C: "{{ ansible_env.DOCKER_NAME_C }}_{{ inventory_hostname }}"
      when: "'P' in group_names or 'D' in group_names or 'C' in group_names"
      tags: always
      
    - name: Register all values.
      set_fact:
        PREFILL_API_SERVER_LIST: >-
          {% set result=[] %}
          {% for host in groups['P']|default([]) %}
            {% set h=hostvars.get(host,{}) %}
            {% set ansible_host_val=h.ansible_host|default('') %}
            {% set host_ip_val=h.host_ip|default('') %}
            {% set api_port_val=h.api_port|default('9000') %}
            {% if ansible_host_val and host_ip_val and ansible_host_val == host_ip_val %}
              {% set entry=ansible_host_val~':'~api_port_val %}
              {% if entry not in result %}
              {% set _=result.append(entry) %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {{ result|join(',') }}
        DECODE_API_SERVER_LIST: >-
          {% set result=[] %}
          {% for host in groups['D']|default([]) %}
            {% set h=hostvars.get(host,{}) %}
            {% set ip=h.ansible_host|default('') %}
            {% set port=h.api_port|default('9100') %}
            {% set num=h.ascend_rt_visible_devices.count(',')|default('0') %}
            {% if ip %}
              {% set entry=ip~':'~port~'@'~num %}
              {% if entry not in result %}
                {% set _=result.append(entry) %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {{ result | join(',') }}
        DECODE_SERVER_OFFSET: "{% set offsets = {} %}{% set ns = namespace(cnt=0) %}{% for host in groups['D']|default([]) %}{% set _ = offsets.update({host: ns.cnt}) %}{% set num=hostvars[host].ascend_rt_visible_devices.count(',')|default('0')|int %}{% set ns.cnt = ns.cnt + num + 1 %}{% endfor %}{{ offsets }}"
      run_once: yes
      delegate_to: localhost
      tags: always

    - name: Display all values.
      debug:
        msg: |
         PREFILL_API_SERVER_LIST: {{ PREFILL_API_SERVER_LIST }}
         DECODE_API_SERVER_LIST: {{ DECODE_API_SERVER_LIST }}
         DECODE_SERVER_OFFSET: {{ DECODE_SERVER_OFFSET }}
      run_once: yes
      delegate_to: localhost
      tags: always
   
    - name: Generate a script to run the global proxy server.
      copy:
        content: "{{ run_proxy_cmd }}"
        dest: "$SCRIPTS_PATH/run_proxy_server.sh"
        mode: '0750'
      when: "'C' in group_names"
      tags:
        - run_proxy

    - name: Run the global proxy server.
      command: bash -c "{{ docker_start_proxy_cmd_c }}"
      environment:
        DOCKER_NAME_C: "{{ ACTUAL_DOCKER_NAME_C }}"
      when: "'C' in group_names"
      tags:
        - run_proxy
