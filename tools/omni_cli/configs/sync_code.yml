# Copyright 2025 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================

- name: run omniai
  hosts: all
  any_errors_fatal: true
  max_fail_percentage: 0
  gather_facts: yes

  # environment:
  #   CODE_PATH: "/data/w00600280"
  #   # executor_code_path: ""

  vars:
    docker_cp_proxy_code_cmd: "docker cp {{ ansible_env.CODE_PATH }}/omniinfer $DOCKER_NAME_C:/workspace/"
    docker_cp_prefill_code_cmd: "docker cp {{ ansible_env.CODE_PATH }}/omniinfer $DOCKER_NAME_P:/workspace/"
    docker_cp_decode_code_cmd: "docker cp {{ ansible_env.CODE_PATH }}/omniinfer $DOCKER_NAME_D:/workspace/"

  tasks:
    - name: generate container name.
      set_fact:
        ACTUAL_DOCKER_NAME_P: "{{ container_name }}"
        ACTUAL_DOCKER_NAME_D: "{{ container_name }}"
        ACTUAL_DOCKER_NAME_C: "{{ container_name }}"
      when: "'P' in group_names or 'D' in group_names or 'C' in group_names"
      tags: always
      
    - name: Create a directory to store the code.
      ansible.builtin.file:
        path: "{{ ansible_env.CODE_PATH }}"
        state: directory
      tags: sync_code

    - name: The executor synchronizes code to all instances.
      synchronize:
        src: "{{ ansible_env.CODE_PATH }}/omniinfer"
        dest: "{{ ansible_env.CODE_PATH }}/"
      when: >
        'P' in group_names or
        'D' in group_names or
        (
          'C' in group_names and
          ansible_host not in
          (groups.get('P', []) | map('extract', hostvars, 'ansible_host') | list) and
          ansible_host not in
          (groups.get('D', []) | map('extract', hostvars, 'ansible_host') | list)
        )
      tags: sync_code

    - name: Copy the code from the host machine into the container (proxy).
      command: bash -c "{{ docker_cp_proxy_code_cmd }}"
      environment: 
        DOCKER_NAME_C: "{{ ACTUAL_DOCKER_NAME_C }}"
      when: "'C' in group_names"
      tags: sync_code

    - name: Copy the code from the host machine into the container (prefill).
      command: bash -c "{{ docker_cp_prefill_code_cmd }}"
      environment: 
        DOCKER_NAME_P: "{{ ACTUAL_DOCKER_NAME_P }}"
      when: "'P' in group_names"
      tags: sync_code

    - name: Copy the code from the host machine into the container (decode).
      command: bash -c "{{ docker_cp_decode_code_cmd }}"
      environment: 
        DOCKER_NAME_D: "{{ ACTUAL_DOCKER_NAME_D }}"
      when: "'D' in group_names"
      tags: sync_code